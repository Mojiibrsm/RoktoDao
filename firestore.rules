rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Function to check if the user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/donors/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/donors/$(request.auth.uid)).data.isAdmin == true;
    }

    // Donors Collection Rules
    match /donors/{donorId} {
      // ANYONE can query the donors list for specific, non-sensitive purposes.
      // 1. Public donor search (must filter by isAvailable)
      // 2. Signup check for existing phone number
      // 3. Signup check for existing email
      allow list: if (request.query.where.isAvailable == true) || 
                    (request.query.keys().hasOnly(['phoneNumber'])) || 
                    (request.query.keys().hasOnly(['email'])) || 
                    isAdmin();
      
      // ANYONE can create a donor profile (signup)
      allow create: if true;

      // Logged-in users can read/update their OWN profile.
      // Admins can read/update ANY profile.
      allow read, update: if request.auth.uid == donorId || isAdmin();
      
      // ONLY admins can delete a donor.
      allow delete: if isAdmin();
    }

    // Requests Collection Rules
    match /requests/{requestId} {
      // ANYONE can read requests (for homepage stats and requests page)
      allow read: if true;
      
      // Logged-in users and admins can create/update requests
      allow create, update: if request.auth != null || isAdmin();

      // Only the user who created it or an admin can delete it.
      allow delete: if (resource.data.uid == request.auth.uid) || isAdmin();
    }

    // Gallery Collection Rules
    match /gallery/{imageId} {
      // Allow ANYONE to list APPROVED gallery images (for public gallery)
      allow list: if request.query.where.status == 'approved' || isAdmin();
      
      // Allow ANYONE to get a single document if it's APPROVED (for direct links)
      allow get: if resource.data.status == 'approved' || isAdmin();
      
      // Allow only LOGGED-IN users to create (upload) an image (it will be pending)
      allow create: if request.auth != null;

      // Allow ONLY ADMINS to update (approve) or delete images.
      allow update, delete: if isAdmin();
    }

    // Blogs Collection Rules
    match /blogs/{blogId} {
      // ANYONE can read blog posts
      allow read: if true;
      
      // ONLY admins can write/delete blog posts
      allow write, delete: if isAdmin();
    }

    // Moderators Collection Rules
    match /moderators/{moderatorId} {
      // ANYONE can read the moderators list (for the team page)
      allow read: if true;

      // ONLY admins can write/delete moderators
      allow write, delete: if isAdmin();
    }
    
    // Marquee Notices Collection Rules
    match /marquee-notices/{noticeId} {
      // ANYONE can read notices
      allow read: if true;
      
      // ONLY admins can write/delete notices
      allow write, delete: if isAdmin();
    }
    
    // Feedback Collection Rules
    match /feedback/{feedbackId} {
       // ANYONE can create feedback (contact form)
      allow create: if true;
      
      // ONLY admins can read/update/delete feedback
      allow read, update, delete: if isAdmin();
    }

    // Settings Collection Rules
    match /settings/global {
      // ANYONE can read the global settings
      allow read: if true;
      
      // ONLY admins can write the global settings
      allow write: if isAdmin();
    }
    
    // OTP Codes Collection Rules
    match /otp_codes/{phone} {
       // NO ONE can read/list OTP codes from the client
      allow read: if false;

      // ANYONE can create/update an OTP (for sending a new one)
      // The actual creation is handled by a secure backend function.
      allow write: if true; 
      
      // Backend function will delete the code after verification.
      allow delete: if true; 
    }
    
    // SMS Logs Collection Rules
    match /sms_logs/{logId} {
      // ONLY ADMINS can read SMS logs.
      allow read: if isAdmin();
      
      // Writing is handled by the backend function
      allow write: if false;
    }
  }
}
