rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getDonorData(userId) {
        return get(/databases/$(database)/documents/donors/$(userId)).data;
    }

    function isAdmin() {
      return isUserAuthenticated() && getDonorData(request.auth.uid).isAdmin == true;
    }

    // ================================================================
    //  Publicly Readable Collections (for homepage, blog, gallery etc)
    // ================================================================

    match /requests/{document=**} {
      // Anyone can read requests.
      allow read: if true;
      // Authenticated users can create requests.
      allow create: if isUserAuthenticated();
      // Only the owner or an admin can update/delete their own request.
      allow update, delete: if isAdmin() || (isUserAuthenticated() && isOwner(resource.data.uid));
    }

    match /blogs/{document=**} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /gallery/{document=**} {
      allow read: if true;
      // Any authenticated user can create (upload) an image, but it will be pending.
      allow create: if isUserAuthenticated();
      // Only admins can update (approve) or delete images.
      allow update, delete: if isAdmin();
    }
    
    match /moderators/{document=**} {
        allow read: if true;
        allow write: if isAdmin();
    }

    match /marquee-notices/{document=**} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // ================================================================
    //  Donors Collection (User Profiles)
    // ================================================================
    
    match /donors/{userId} {
      // A user can read their own profile. Admins can read any profile.
      allow get: if isUserAuthenticated() && (isOwner(userId) || isAdmin());

      // Anyone can query the donors collection for available donors.
      // This is crucial for the public search page. Admins can list all.
      allow list: if request.query.where.isAvailable == true || isAdmin();

      // Anyone can create a new donor profile (signup).
      allow create: if true;

      // A user can update their own profile. Admins can update any profile.
      allow update: if isUserAuthenticated() && (isOwner(userId) || isAdmin());

      // Only an admin can delete a user profile.
      allow delete: if isAdmin();
    }

    // ================================================================
    //  Admin-Only or Server-Side Collections
    // ================================================================

    match /feedback/{document=**} {
        allow read, write: if isAdmin();
        // Allow contact form to create
        allow create: if true;
    }
    
    match /settings/{document=**} {
        allow read, write: if isAdmin();
    }

    match /sms_logs/{document=**} {
      // Only admins can read logs.
      allow read: if isAdmin();
      // Only the server (or admin for testing) can create logs.
      // Assuming server uses admin SDK which bypasses these rules.
      // Setting to false for client-side to be safe.
      allow write: if false; 
    }

    match /otp_codes/{document=**} {
        // No client should be able to read or write OTPs.
        // This must be handled by a secure backend environment.
        allow read, write: if false;
    }
  }
}
