rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAdmin() {
      return get(/databases/$(database)/documents/donors/$(request.auth.uid)).data.isAdmin == true;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isSignedIn() {
      return request.auth != null;
    }

    // Public read for most collections
    match /{collection}/{docId} where collection in ['blogs', 'requests', 'marquee-notices', 'moderators', 'settings'] {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Donors collection rules
    match /donors/{userId} {
      allow read: if true;
      allow create: if true; // Anyone can sign up
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Gallery collection rules
    match /gallery/{imageId} {
      allow read: if true;
      allow create: if isSignedIn(); // Any signed-in user can create an entry (upload)
      allow update, delete: if isAdmin(); // Only admins can approve (update) or delete
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    // Allow read access to everyone for all files.
    match /{allPaths=**} {
      allow read: if true;
      // Allow write only if the user is signed in.
      // This is a basic rule. For more security, you might want to check file size, type, etc.
      // Or tie it to a specific user's folder.
      allow write: if request.auth != null;
    }
  }
}
