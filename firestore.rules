rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if the user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/donors/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/donors/$(request.auth.uid)).data.isAdmin == true;
    }

    // Donors Collection Rules
    match /donors/{donorId} {
      // READ: 
      // 1. Allow a user to read their own profile.
      // 2. Allow admins to read any profile.
      allow get: if request.auth.uid == donorId || isAdmin();
      
      // LIST (Query):
      // 1. Allow anyone to query for available donors for the search page.
      // 2. Allow anyone to query by phone number OR email for signup validation.
      // 3. Allow admins to query anything.
      allow list: if (request.query.where.isAvailable == true) || 
                    (request.query.keys().hasOnly(['phoneNumber'])) || 
                    (request.query.keys().hasOnly(['email'])) ||
                    isAdmin();

      // CREATE:
      // Allow anyone to create a donor document (signup).
      allow create: if true;

      // UPDATE:
      // 1. Allow a user to update their own profile.
      // 2. Allow admins to update any profile.
      allow update: if request.auth.uid == donorId || isAdmin();

      // DELETE:
      // Allow only admins to delete donor documents.
      allow delete: if isAdmin();
    }

    // Requests Collection Rules
    match /requests/{requestId} {
      // READ: Allow anyone to read requests (for homepage, requests page, etc.)
      allow get, list: if true;

      // CREATE: Allow any logged-in user to create a request.
      allow create: if request.auth != null;

      // UPDATE: Allow admins to update requests (e.g., change status).
      // Also allow logged-in users to respond (update the 'responders' field).
      allow update: if isAdmin() || (request.auth != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['responders']));

      // DELETE: Allow only admins to delete requests.
      allow delete: if isAdmin();
    }

    // Blogs, Moderators, Marquee, Gallery Collections
    match /blogs/{blogId} {
      // Allow anyone to read blog posts.
      allow get, list: if true;
      // Allow only admins to create, update, or delete blog posts.
      allow write: if isAdmin();
    }

    match /moderators/{modId} {
      // Allow anyone to read moderator info (for the team page).
      allow get, list: if true;
      // Allow only admins to manage moderators.
      allow write: if isAdmin();
    }

    match /marquee-notices/{noticeId} {
        // Allow anyone to read notices.
        allow get, list: if true;
        // Allow only admins to write notices.
        allow write: if isAdmin();
    }

    match /gallery/{imageId} {
      // READ: Allow anyone to read approved images.
      allow get: if resource.data.status == 'approved' || isAdmin();
      allow list: if request.query.where.status == 'approved' || isAdmin();

      // CREATE: Allow any logged-in user to upload an image (it will be pending).
      allow create: if request.auth != null;
      
      // UPDATE, DELETE: Allow only admins to manage images.
      allow update, delete: if isAdmin();
    }
    
    // Settings, Feedback, OTP, SMS Logs
    match /settings/global {
      // Allow anyone to read global settings.
      allow get: if true;
      // Allow only admins to write to global settings.
      allow write: if isAdmin();
    }

    match /feedback/{feedbackId} {
      // Allow only admins to read feedback.
      allow read: if isAdmin();
      // Allow anyone to submit feedback.
      allow create: if true;
      // Allow only admins to update/delete feedback.
      allow update, delete: if isAdmin();
    }
    
    match /otp_codes/{phone} {
        // Disallow client reads. Verification should happen on the server.
        allow read: if false;
        // Allow server-side writes (via Admin SDK) only.
        allow write: if false; 
    }
    
    match /sms_logs/{logId} {
        // Allow only admins to read SMS logs.
        allow read, list: if isAdmin();
        // Disallow any client writes.
        allow write: if false;
    }
  }
}
